RAIL FENCE
#include<stdio.h>
#include<conio.h>
#include<string.h>
void main()
{
int i,j,k,l;
char a[20],c[20],d[20];
clrscr();
printf("\n\t\t RAIL FENCE TECHNIQUE");
printf("\n\nEnter the input string : ");
gets(a);
l=strlen(a);
/*Ciphering*/
for(i=0,j=0;i<l;i++)
{
if(i%2==0)
c[j++]=a[i];
}
for(i=0;i<l;i++)
{
if(i%2==1)
c[j++]=a[i];
}
c[j]='\0';
printf("\nCipher text after applying rail fence :");
printf("\n%s",c);
/*Deciphering*/
if(l%2==0)
k=l/2;
else
k=(l/2)+1;
for(i=0,j=0;i<k;i++)
{
d[j]=c[i];
j=j+2;
}
for(i=k,j=1;i<l;i++)
{
d[j]=c[i];
j=j+2;
}
d[l]='\0';
printf("\nText after decryption : ");
printf("%s",d);
getch();
}	#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <openssl/des.h>
#define BLOCK_SIZE 8 // Size of data blocks in bytes
void encryptDES(const unsigned char *plaintext, const unsigned char *key, unsigned char *ciphertext) {
    DES_cblock desKey1, desKey2, desKey3;
    DES_key_schedule key1_schedule, key2_schedule, key3_schedule;
    memcpy(desKey1, key, 8);
    memcpy(desKey2, key + 8, 8);
    memcpy(desKey3, key + 16, 8);
    DES_set_key_checked(&desKey1, &key1_schedule);
    DES_set_key_checked(&desKey2, &key2_schedule);
    DES_set_key_checked(&desKey3, &key3_schedule);
    DES_ede3_cbc_encrypt(plaintext, ciphertext, BLOCK_SIZE, &key1_schedule, &key2_schedule, &key3_schedule, DES_ENCRYPT);
}
int main() {
    unsigned char plaintext[] = "Hello World!";
    unsigned char key[24] = "ThisIsASecretKey123456"; 
    unsigned char iv[8] = {0}; 
    int num_blocks = strlen((char *)plaintext) / BLOCK_SIZE + 1;
    if (strlen((char *)plaintext) % BLOCK_SIZE == 0)
        num_blocks--;
unsigned char *ciphertext = malloc(num_blocks * BLOCK_SIZE);
    unsigned char *decryptedtext = malloc(num_blocks * BLOCK_SIZE);
    for (int i = 0; i < num_blocks; i++) {
        encryptDES(plaintext + i * BLOCK_SIZE, key, ciphertext + i * BLOCK_SIZE);
    }
    printf("Cipher Text: ");
    for (int i = 0; i < num_blocks * BLOCK_SIZE; i++) {
        printf("%02X ", ciphertext[i]);
    }
    printf("\n");
    free(ciphertext);
    free(decryptedtext);
    
    return 0;
}





